<?php

// $Id$
/**
 * @file
 * Project Browser Server Example module.
 * Authored by Leighton Whiting for Google Summer of Code 2011
 */

// ======================================
// Hooks:
// ======================================

/**
 * Implements hook_project_browser_server_query()
().
 *
 * The function takes a $filters parameter that looks like this:
 *
 * array(
 *   'version' => '7', // The Major Version of Backdrop that is running on the Client
 *   'text' => 'views', // The text that was entered as the search query, or '' if none
 *   'categories' => array() // The categories that were selected, if any
 *   'type' => 'module', // The type of project being searched
 *   'page' => 3, // The zero-based page number
 *   'requested' => 12, // How many results are requested per page
 * )
 *
 * The function should return an array like this:
 *
 * array(
 *   'total' = 5, // The total number of results found for the filters
 *   'projects' => array( // An array of projects returned for this page request
 *     'views' => array( // A project array keyed by the machine name
 *       'type' => 'module', // The type of project this is. Can be 'module' or 'theme'
 *       'title' => 'Views', // The title of the project
 *       'name' => 'views', // The machine name of the project
 *       'author' => 'merlinofchaos', // The author's name
 *       'description' => "Long project description ...",
 *       'image' => 'http://www.example.com/image.jpg', // Absolute url to the image, if any
 *       'usage' => '542312', // How many Downloads the module has had
 *       'project url' => 'http://www.backdrop.org/projects/views', // Absolute url to the project page, if any
 *       'project status url' => 'http://updates.backdrop.org/release-history/views/7.x', // The absolute url of the update checker, formatted like how Backdrop.org Update Status does it
 *       'last updated' => '12342523', // UNIX Timestamp of when the project was last updated
 *       'maintenance status' => 'Actively maintained', // Maintenance status
 *       'development status' => 'Under active development', // Development status
 *       'rating' => '9.6', // A rating on a scale of 1 to 10 of the project, if available
 *       'dependencies' => array( // An array of the dependencies of this module
 *         'ctools',
 *       ),
 *     ),
 *   'name_2 => array( ... ),
 *   ),
 * );
 *
 * @param $filters
 *   An associative array of the filters and their values
 * @return array
 *   Returns an array of results, formatted how Project Browser likes it
 */
function borg_pbs_project_browser_server_query($filters) {
  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', 'project');
  $query->propertyCondition('status', 1);

  // This requires a custom field
/*****************
  // Filter out projects based on type.
  if (isset($filters['type'])) {
    $query->fieldCondition('project_type', 'value', check_plain($filters['type']), '=');
  }
 *****************/

  // This requires a custom field
/*****************
  // Filter out projects based on drupal version number.
  if (isset($filters['version'])) {
    $query->fieldCondition('api_version', 'value', check_plain($filters['version']), '=');
  }
 *****************/

  // Filter out projects based on categories number.
  if (isset($filters['categories']) && is_array($filters['categories']) && !empty($filters['categories'])) {
    // TODO
  }
  
 
  // Filter out projects based on the text query.
  if (!empty($filters['text'])) {
    $query->propertyCondition('title', 'value', '%' . $filters['text'] . '%', 'LIKE');
  }

  // Only send back the requested amount.
  $start = $filters['page'] * $filters['requested'];
  $query->range($start, $filters['requested']);


  // Add the sorting.
  if (!empty($filters['order_by'])) {
    $sort_direction = (!empty($filters['sort']) && $filters['sort'] == 'asc') ? 'ASC' : 'DESC';
    switch ($filters['order_by']) {
      case 'title':
        $query->propertyOrderBy('title', $sort_direction);
        break;

/*****************
      case 'usage':
        $query->orderBy('p.usage_count', $sort_direction);
        break;
      case 'score':
        if (!empty($filters['text'])) {
          $query->addExpression("MATCH(p.title) AGAINST (:txtw)", 'title_rel', array(':txtw' => $filters['text']));
          $query->addExpression("MATCH(p.description) AGAINST (:txtw)", 'desc_rel', array(':txtw' => $filters['text']));
          $query->orderBy('title_rel', $sort_direction);
          $query->orderBy('desc_rel', $sort_direction);
        }
         else {
          // Fallback to just use usage_count.
          $query->orderBy('p.usage_count', $sort_direction);
        }
        break;
****************/

      case 'name':
        $query->propertyOrderBy('name', $sort_direction);
        break;

      case 'latest_release':
        $query->propertyOrderBy('updated', $sort_direction);
        break;
    }
  }

  $result = $query->execute();
  $count_result = count($result);
  
  $projects = array();
  
  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $nodes = node_load_multiple($nids);
    foreach ($nodes as $node) {
      // Build the description field
      $descr = field_get_items('node', $node, 'body');
      $descr_field = reset($descr);
      $descr_value = $descr_field['value'];

      $projects[$node->project['name']] = array(
        'type' => 'module', // This needs changing to a field value
        'title' => $node->title,
        'name' => $node->project['name'],
        'drupal version' => '', // This needs changing to a field value
        'author' => $node->name,
        'description' => $descr_value,
        'categories' => '', // This needs changing to a field value
        'image' => '', // This needs changing to a field value
        'usage' => '', // This needs changing to a field value
        'project url' => url($node->path['source'], array('absolute' => TRUE)),
        'project status url' => 'https://updates.backdropcms.org/release-history/' . $node->project['name'] . '/' . $filters['version'] . '.x',
        'last updated' => $node->changed,
        'maintenance status' => '', // This needs changing to a field value
        'development status' => '', // This needs changing to a field value
        'rating' => '', // This needs changing to a field value
        'includes' => array(), // This needs changing to a field value
      );
    }
  }  

  return array(
    'total' => $count_result,
    'projects' => $projects,
  );
}

/**
 * Implements hook_project_browser_server_categories()
().
 *
 * The function should return an array like this:
 *
 * array(
 *   'category_1' => "Category 1",
 *   'category_2' => "Category 2",
 *   'category_3' => "Category 3",
 * );
 *
 * @param $type
 *   The type of project to get the categories for, 'module' or 'theme'
 * @return array
 *   Returns an array of categories
 */
function borg_pbs_project_browser_server_categories($type) {
  $categories = array();

  switch ($type) {
    case 'module':
      $categories = array(
        'admin' => "Administrative",
        'search' => "Search",
        'user_management' => "User Management",
      );
      break;

    case 'theme':
      $categories = array(
        'dark' => "Dark",
        'light' => "Light",
      );
  }

  return $categories;
}